//
//  MoviesAppViewController.swift
//  MovieApp
//
//  Created by Achem Samuel on 9/22/19.
//  Copyright (c) 2019 Achem Samuel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class UpcomingMoviesViewController: UIViewController
{
  var interactor: UpcomingMoviesBusinessLogic?
  var router: (NSObjectProtocol & MoviesAppRoutingLogic & MoviesAppDataPassing)?
  var viewModel = UpcomingMovies.ViewModel()
    
    @IBOutlet weak var collectionView: UICollectionView!
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = UpcomingMoviesInteractor()
    let presenter = UpcomingMoviesPresenter()
    let router = MoviesAppRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    initialSetup()
  }
  
    func initialSetup() {
        interactor?.fetchUpcomingMovies(request: UpcomingMovies.FetchUpcomingMovies.Request())
        collectionView.delegate = self
        collectionView.dataSource = self
        
    }
  

}

extension UpcomingMoviesViewController : UpcomingMoviesDisplayLogic {
    func displayUpcomingMovies(viewModel: UpcomingMovies.FetchUpcomingMovies.ViewModel) {
        self.viewModel.posterPaths = viewModel.posterPaths
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
}

extension UpcomingMoviesViewController : UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.viewModel.posterPaths.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: UpcomingMoviesCollectionViewCell.reuseIdentifer, for: indexPath) as? UpcomingMoviesCollectionViewCell
        cell?.setupView(url: self.viewModel.posterPaths[indexPath.row].posterPath)
        return cell ?? UICollectionViewCell()
    }
    
    
}

extension UpcomingMoviesViewController : UICollectionViewDelegate {
    
}
